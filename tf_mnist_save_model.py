# -*- coding: utf-8 -*-
"""tf_mnist_save_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1joH8hpI8L-Ijs3rcS42LnewznP2VcezY
"""

import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import RMSprop
import matplotlib.pyplot as plt



"""Keras has 60K training images and 10K testing images"""

(mnist_train_images, mnist_train_labels), (mnist_test_images, mnist_test_labels) = mnist.load_data()

"""# Reshape and normalize"""

train_images = mnist_train_images.reshape(60000, 784)
test_images = mnist_test_images.reshape(10000, 784)
train_images = train_images.astype('float32')
test_images = test_images.astype('float32')
train_images /= 255
test_images /= 255

train_labels = keras.utils.to_categorical(mnist_train_labels, 10)
test_labels = keras.utils.to_categorical(mnist_test_labels, 10)

model = Sequential()
model.add(Dense(512, activation='relu', input_shape=(784,)))
model.add(Dense(10, activation='softmax'))

model.compile(loss='categorical_crossentropy',optimizer=RMSprop(),metrics=['accuracy'])

model.summary()

model.fit(train_images, train_labels,
                    batch_size=100,
                    epochs=10,
                    verbose=2,
                    validation_data=(test_images, test_labels))

loss, accuracy = model.evaluate(test_images,  test_labels, verbose=2)

"""Predict image : 5233"""

test_image = test_images[5233,:].reshape(1,784)
    predicted_cat = model.predict(test_image).argmax()
    label = test_labels[5233].argmax()
    plt.title('Prediction: %d Label: %d' % (predicted_cat, label))
    plt.imshow(test_image.reshape([28,28]), cmap=plt.get_cmap('gray_r'))
    plt.show()

"""Predict image 3245"""

test_image = test_images[3245,:].reshape(1,784)
predicted_cat = model.predict(test_image).argmax()
label = test_labels[3245].argmax()
plt.title('Prediction: %d Label: %d' % (predicted_cat, label))
plt.imshow(test_image.reshape([28,28]), cmap=plt.get_cmap('gray_r'))
plt.show()

model.save('image_classifier_model/1')

!ls

!ls image_classifier_model/1

!ls image_classifier_model/1/assets

!ls image_classifier_model/1/variables

from tensorflow.keras.models import load_model

mnist_model = load_model('image_classifier_model/1/')

test_image = test_images[5233,:].reshape(1,784)
predicted_cat = mnist_model.predict(test_image).argmax()
label = test_labels[5233].argmax()
plt.title('Prediction: %d Label: %d' % (predicted_cat, label))
plt.imshow(test_image.reshape([28,28]), cmap=plt.get_cmap('gray_r'))
plt.show()

test_image = test_images[3245,:].reshape(1,784)
predicted_cat = model.predict(test_image).argmax()
label = test_labels[3245].argmax()
plt.title('Prediction: %d Label: %d' % (predicted_cat, label))
plt.imshow(test_image.reshape([28,28]), cmap=plt.get_cmap('gray_r'))
plt.show()

!ls

!zip -r mnistmodel.zip image_classifier_model

!ls

from google.colab import files
files.download('mnistmodel.zip')

